   " General {
        if count(g:spf13_bundle_groups, 'general')
            Bundle 'scrooloose/nerdtree'
            UnBundle 'altercation/vim-colors-solarized'
            UnBundle 'spf13/vim-colors'
            UnBundle 'tpope/vim-surround'
            UnBundle 'tpope/vim-repeat'
            UnBundle 'rhysd/conflict-marker.vim'
            UnBundle 'jiangmiao/auto-pairs'
            UnBundle 'ctrlpvim/ctrlp.vim'
            UnBundle 'tacahiroy/ctrlp-funky'
            UnBundle 'terryma/vim-multiple-cursors'
            UnBundle 'vim-scripts/sessionman.vim'
            UnBundle 'matchit.zip'
            if (has("python") || has("python3")) && exists('g:spf13_use_powerline') && !exists('g:spf13_use_old_powerline')
                UnBundle 'Lokaltog/powerline', {'rtp':'/powerline/bindings/vim'}
            elseif exists('g:spf13_use_powerline') && exists('g:spf13_use_old_powerline')
                UnBundle 'Lokaltog/vim-powerline'
            else
                UnBundle 'vim-airline/vim-airline'
                UnBundle 'vim-airline/vim-airline-themes'
            endif
            UnBundle 'powerline/fonts'
            UnBundle 'bling/vim-bufferline'
            UnBundle 'easymotion/vim-easymotion'
            UnBundle 'jistr/vim-nerdtree-tabs'
            UnBundle 'flazz/vim-colorschemes'
            UnBundle 'mbbill/undotree'
            UnBundle 'nathanaelkane/vim-indent-guides'
            if !exists('g:spf13_no_views')
                UnBundle 'vim-scripts/restore_view.vim'
            endif
            UnBundle 'mhinz/vim-signify'
            UnBundle 'tpope/vim-abolish.git'
            UnBundle 'osyo-manga/vim-over'
            UnBundle 'kana/vim-textobj-user'
            UnBundle 'kana/vim-textobj-indent'
            UnBundle 'gcmt/wildfire.vim'
        endif
    " }

    " Writing {
        if count(g:spf13_bundle_groups, 'writing')
            UnBundle 'reedes/vim-litecorrect'
            UnBundle 'reedes/vim-textobj-sentence'
            UnBundle 'reedes/vim-textobj-quote'
            UnBundle 'reedes/vim-wordy'
        endif
    " }

    " General Programming {
        if count(g:spf13_bundle_groups, 'programming')
            " Pick one of the checksyntax, jslint, or syntastic
            Bundle 'scrooloose/syntastic'
            UnBundle 'tpope/vim-fugitive'
            UnBundle 'mattn/webapi-vim'
            UnBundle 'mattn/gist-vim'
            UnBundle 'scrooloose/nerdcommenter'
            UnBundle 'tpope/vim-commentary'
            UnBundle 'godlygeek/tabular'
            UnBundle 'luochen1990/rainbow'
            if executable('ctags')
                UnBundle 'majutsushi/tagbar'
            endif
        endif
    " }

    " Snippets & AutoComplete {
        if count(g:spf13_bundle_groups, 'snipmate')
            UnBundle 'garbas/vim-snipmate'
            UnBundle 'honza/vim-snippets'
            " Source support_function.vim to support vim-snippets.
            if filereadable(expand("~/.vim/bundle/vim-snippets/snippets/support_functions.vim"))
                source ~/.vim/bundle/vim-snippets/snippets/support_functions.vim
            endif
        elseif count(g:spf13_bundle_groups, 'youcompleteme')
            Bundle 'Valloric/YouCompleteMe'
            Bundle 'SirVer/ultisnips'
            Bundle 'honza/vim-snippets'
        elseif count(g:spf13_bundle_groups, 'neocomplcache')
            Bundle 'Shougo/neocomplcache'
            Bundle 'Shougo/neosnippet'
            Bundle 'Shougo/neosnippet-snippets'
            Bundle 'honza/vim-snippets'
        elseif count(g:spf13_bundle_groups, 'neocomplete')
            UnBundle 'Shougo/neocomplete.vim.git'
            UnBundle 'Shougo/neosnippet'
            UnBundle 'Shougo/neosnippet-snippets'
            UnBundle 'honza/vim-snippets'
        endif
    " }
    " Scala {
        if count(g:spf13_bundle_groups, 'scala')
            Bundle 'derekwyatt/vim-scala'
            Bundle 'derekwyatt/vim-sbt'
            Bundle 'xptemplate'
        endif
